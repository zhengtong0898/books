设计原则


封装变化的内容: 
	找到程度中的变化内容并将其与不变的内容区分开.
	如果变化的内容不复杂, 用一个函数来隔离(封装)起来即可, 
	如果变化的内容过于复杂, 用一个独立的类来再拆分.


面向接口进行开发, 而不是面向实现:
	与其依赖一个具体的类，不如依赖一个接口, 因为接口有明确定义某个方法, 这通常很难发生变化.
	接口可以作用再, 成员变量、方法参数、抽象方法中
	成员变量：声明一个接口对象, 实例化时根据特定场景初始化不同的派生类. 这种方式的
	         好处是: 可以根据不同的场景去不断新增派生类来满足需求而不需要改原有代码.
			 缺点是: 写代码之前都需要设计这个环节，而且设计代码时要多花点心思, 其他水平不到位的人无法直观的看懂你的代码.
	方法参数：声明一个形参对象是一个接口对象, 方法内调用的都是接口方法.
	         好处是: 基于该接口对象新增的对象都可以再当前方法中运行不会报错.
			 缺点是：写代码之前都需要设计这个环节，而且设计代码时要多花点心思, 其他水平不到位的人无法直观的看懂你的代码.
	抽象方法：声明一个抽象方法, 要求所有派生类都要各自实现这个抽象方法.


组合由于继承
	组合是代替继承的一种方法. 继承代表类之间的"是"关系(汽车是交通工具), 而组合则代表"有"关系(汽车有一个引擎).
	这个原则也能用于聚合(一对一, 一对多, 多对一, 多对多). 例如: 汽车上有司机, 但是司机也可能有其他能力(骑自行车, 开拖拉机).
	继承是纵向扩展，组合是横向扩展.
